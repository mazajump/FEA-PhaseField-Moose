#!/usr/bin/env python

import os
import sys
import numpy as np
import matplotlib.pyplot as plt

def expected_nc01():
    # these data were generated by Mathematica
    data = [
        [1, 1.9987388658953044e6],
        [2, 1.997473003356622e6],
        [3, 1.9961992552635241e6],
        [4, 1.9949144459053434e6],
        [5, 1.9936153794417293e6],
        [6, 1.9922988382789681e6],
        [7, 1.990961581369409e6],
        [8, 1.989600342441032e6],
        [9, 1.9882118281638524e6],
        [10, 1.9867927162594956e6],
        [11, 1.9853396535598668e6],
        [12, 1.983849254020408e6],
        [13, 1.9823180966929803e6],
        [14, 1.9807427236629226e6],
        [15, 1.9791196379543294e6],
        [16, 1.9774453014070527e6],
        [17, 1.9757161325283886e6],
        [18, 1.9739285043218252e6],
        [19, 1.9720787420946427e6],
        [20, 1.9701631212455325e6],
        [21, 1.9681778650327846e6],
        [22, 1.9661191423229282e6],
        [23, 1.9639830653190569e6],
        [24, 1.9617656872673703e6],
        [25, 1.9594630001397769e6],
        [26, 1.9570709322896611e6],
        [27, 1.9545853460771972e6],
        [28, 1.95200203545981e6],
        [29, 1.9493167235426095e6],
        [30, 1.9465250600828165e6],
        [31, 1.9436226189413539e6],
        [32, 1.9406048954739233e6],
        [33, 1.9374673038529833e6],
        [34, 1.9342051743111175e6],
        [35, 1.9308137502953084e6],
        [36, 1.927288185520614e6],
        [37, 1.9236235409106864e6],
        [38, 1.9198147814114357e6],
        [39, 1.9158567726629758e6],
        [40, 1.9117442775137094e6],
        [41, 1.9074719523590973e6],
        [42, 1.9030343432862137e6],
        [43, 1.8984258820036685e6],
        [44, 1.893640881534833e6],
        [45, 1.888673531650538e6],
        [46, 1.8835178940154964e6],
        [47, 1.87816789702062e6],
        [48, 1.8726173302711467e6],
        [49, 1.866859838698014e6],
        [50, 1.8608889162572254e6],
        [51, 1.854697899178978e6],
        [52, 1.8482799587250694e6],
        [53, 1.8416280934095006e6],
        [54, 1.8347351206332254e6],
        [55, 1.827593667679588e6],
        [56, 1.820196162012125e6],
        [57, 1.8125348208109739e6],
        [58, 1.804601639678089e6],
        [59, 1.7963883804347292e6],
        [60, 1.787886557927142e6],
        [61, 1.779087425747921e6],
        [62, 1.769981960771059e6],
        [63, 1.7605608463880569e6],
        [64, 1.7508144543204734e6],
        [65, 1.7407328248707731e6],
        [66, 1.7303056454580543e6],
        [67, 1.719522227267917e6],
        [68, 1.7083714798261218e6],
        [69, 1.6968418832833495e6],
        [70, 1.6849214581729497e6],
        [71, 1.6725977323745592e6],
        [72, 1.659857704983237e6],
        [73, 1.6466878067457206e6],
        [74, 1.6330738566816293e6],
        [75, 1.6190010144570481e6],
        [76, 1.604453728019695e6],
        [77, 1.589415675937467e6],
        [78, 1.5738697038038892e6],
        [79, 1.5577977539828536e6],
        [80, 1.5411807878586098e6],
        [81, 1.5239986996323375e6],
        [82, 1.5062302205601397e6],
        [83, 1.487852812354668e6],
        [84, 1.4688425482683147e6],
        [85, 1.449173980133426e6],
        [86, 1.4288199893460423e6],
        [87, 1.4077516194339402e6],
        [88, 1.3859378874344763e6],
        [89, 1.363345570806688e6],
        [90, 1.3399389659948659e6],
        [91, 1.3156796140214168e6],
        [92, 1.2905259875819106e6],
        [93, 1.2644331330020197e6],
        [94, 1.2373522590389496e6],
        [95, 1.2092302627964644e6],
        [96, 1.1800091808773952e6],
        [97, 1.149625551194106e6],
        [98, 1.1180096674270493e6],
        [99, 1.0850847037365444e6],
        [100, 1.0507656816836859e6]]
    return zip(*data)

def expected_nc02():
    # these data were generated by Mathematica
    data = [
        [1, 1.992679979566782e6],
        [2, 1.9853059810711e6],
        [3, 1.9778772025235142e6],
        [4, 1.9703928239271576e6],
        [5, 1.962852006734565e6],
        [6, 1.9552538932838624e6],
        [7, 1.947597606213375e6],
        [8, 1.9398822478536514e6],
        [9, 1.9321068995958508e6],
        [10, 1.9242706212353818e6],
        [11, 1.9163724502896215e6],
        [12, 1.9084114012884744e6],
        [13, 1.9003864650364656e6],
        [14, 1.8922966078449823e6],
        [15, 1.8841407707332124e6],
        [16, 1.8759178685962204e6],
        [17, 1.8676267893385426e6],
        [18, 1.8592663929715592e6],
        [19, 1.8508355106728168e6],
        [20, 1.8423329438053584e6],
        [21, 1.8337574628950055e6],
        [22, 1.8251078065634049e6],
        [23, 1.8163826804145302e6],
        [24, 1.8075807558721763e6],
        [25, 1.7987006689658356e6],
        [26, 1.7897410190621829e6],
        [27, 1.7807003675392177e6],
        [28, 1.771577236399923e6],
        [29, 1.7623701068221016e6],
        [30, 1.7530774176408318e6],
        [31, 1.743697563759746e6],
        [32, 1.7342288944870948e6],
        [33, 1.724669711792274e6],
        [34, 1.7150182684782194e6],
        [35, 1.705272766264737e6],
        [36, 1.6954313537775215e6],
        [37, 1.685492124437229e6],
        [38, 1.675453114242588e6],
        [39, 1.6653122994411036e6],
        [40, 1.655067594080436e6],
        [41, 1.6447168474330534e6],
        [42, 1.6342578412861985e6],
        [43, 1.6236882870886312e6],
        [44, 1.6130058229449613e6],
        [45, 1.6022080104477066e6],
        [46, 1.5912923313364347e6],
        [47, 1.5802561839725499e6],
        [48, 1.5690968796173737e6],
        [49, 1.557811638500199e6],
        [50, 1.546397585661939e6],
        [51, 1.534851746558818e6],
        [52, 1.5231710424092878e6],
        [53, 1.5113522852659612e6],
        [54, 1.499392172792828e6],
        [55, 1.4872872827263458e6],
        [56, 1.4750340669971625e6],
        [57, 1.4626288454872086e6],
        [58, 1.4500677993946802e6],
        [59, 1.4373469641769787e6],
        [60, 1.4244622220389761e6],
        [61, 1.4114092939309992e6],
        [62, 1.398183731017619e6],
        [63, 1.384780905574687e6],
        [64, 1.3711960012680155e6],
        [65, 1.3574240027625887e6],
        [66, 1.3434596846062252e6],
        [67, 1.3292975993260175e6],
        [68, 1.3149320646697006e6],
        [69, 1.3003571499171602e6],
        [70, 1.285566661179553e6],
        [71, 1.2705541255948455e6],
        [72, 1.2553127743188294e6],
        [73, 1.2398355241997521e6],
        [74, 1.2241149580123804e6],
        [75, 1.2081433031134284e6],
        [76, 1.1919124083645989e6],
        [77, 1.1754137191517185e6],
        [78, 1.1586382503083125e6],
        [79, 1.141576556729063e6],
        [80, 1.1242187014325254e6],
        [81, 1.1065542208027234e6],
        [82, 1.0885720867051852e6],
        [83, 1.07026066513398e6],
        [84, 1.0516076710014408e6],
        [85, 1.0326001186305871e6],
        [86, 1.0132242674505871e6],
        [87, 993465.5623264536],
        [88, 973308.5678739137],
        [89, 952736.8960168852],
        [90, 931733.1259358119],
        [91, 910278.7154271399],
        [92, 888353.9025438342],
        [93, 865937.5962094464],
        [94, 843007.2542883304],
        [95, 819538.7473452301],
        [96, 795506.2060301794],
        [97, 770881.8496687319],
        [98, 745635.7932097359],
        [99, 719735.8291663949],
        [100, 693147.1805599453]]
    return zip(*data)

def expected_nc04():
    data = [[x, 2 - x / 200.0] for x in range(0, 110, 10)]
    return zip(*data)

def expected_nc08_pp():
    data = [[x, 200 * np.sqrt(1.0 - x / 200.0)] for x in range(0, 110, 10)]
    return zip(*data)

def expected_nc08_t():
    data = [[x, 180] for x in range(0, 110, 10)]
    return zip(*data)

def nc01():
    f = open("../../tests/newton_cooling/gold/nc01_porepressure_0101.csv")
    data = [map(float, line.strip().split(",")) for line in f.readlines()[1:] if line.strip()]
    p = [d[1] for d in data]
    x = [d[2] for d in data]
    return (x, p)

def nc02():
    f = open("../../tests/newton_cooling/gold/nc02_porepressure_0001.csv")
    data = [map(float, line.strip().split(",")) for line in f.readlines()[1:] if line.strip()]
    p = [d[1] for d in data]
    x = [d[2] for d in data]
    return (x, p)

def nc04():
    f = open("../../tests/newton_cooling/gold/nc04_temp_0001.csv")
    data = [map(float, line.strip().split(",")) for line in f.readlines()[1:] if line.strip()]
    t = [d[1] for d in data]
    x = [d[2] for d in data]
    return (x, t)

def nc08_pp():
    f = open("../../tests/newton_cooling/gold/nc08_porepressure_0001.csv")
    data = [map(float, line.strip().split(",")) for line in f.readlines()[1:] if line.strip()]
    p = [d[1] for d in data]
    x = [d[2] for d in data]
    return (x, p)

def nc08_t():
    f = open("../../tests/newton_cooling/gold/nc08_temperature_0001.csv")
    data = [map(float, line.strip().split(",")) for line in f.readlines()[1:] if line.strip()]
    t = [d[1] for d in data]
    x = [d[2] for d in data]
    return (x, t)

plt.figure()
plt.plot(expected_nc08_pp()[0], expected_nc08_pp()[1], 'k-', linewidth = 3.0, label = 'expected (P)')
plt.plot(nc08_pp()[0], nc08_pp()[1], 'rs', markersize = 10.0, label = 'MOOSE (P)')
plt.plot(expected_nc08_t()[0], expected_nc08_t()[1], 'b-', linewidth = 3.0, label = 'expected (T)')
plt.plot(nc08_t()[0], nc08_t()[1], 'ro', markersize = 10.0, label = 'MOOSE (T)')
plt.legend(loc = 'lower left')
plt.xlabel("x (m)")
plt.ylabel("Porepressure and Temperature")
plt.title("Steady-state hot ideal-gas results")
plt.savefig("nc08.pdf")

plt.figure()
plt.plot(expected_nc04()[0], expected_nc04()[1], 'k-', linewidth = 3.0, label = 'expected')
plt.plot(nc04()[0], nc04()[1], 'rs', markersize = 10.0, label = 'MOOSE')
plt.legend(loc = 'lower left')
plt.xlabel("x (m)")
plt.ylabel("Temperature (K)")
plt.title("Steady-state temperature distriution in bar")
plt.savefig("nc_temp.pdf")

plt.figure()
plt.plot(expected_nc01()[0], expected_nc01()[1], 'k-', linewidth = 3.0, label = 'expected, t=1E8')
plt.plot(nc01()[0], nc01()[1], 'rs', markersize = 10.0, label = 'MOOSE, t=1E8')
plt.plot(expected_nc02()[0], expected_nc02()[1], 'b-', linewidth = 3.0, label = 'expected, steady')
plt.plot(nc02()[0], nc02()[1], 'ro', markersize = 10.0, label = 'MOOSE, steady')
plt.legend(loc = 'lower left')
plt.xlabel("x (m)")
plt.ylabel("Porepressure (Pa)")
plt.title("Pressure distriution in bar")
plt.savefig("nc.pdf")

sys.exit(0)
