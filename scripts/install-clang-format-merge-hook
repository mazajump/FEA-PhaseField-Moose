#!/usr/bin/env python
# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# LICENSE file contents:
#
#     Copyright (c) 2009 The Chromium Authors. All rights reserved.
#
#     Redistribution and use in source and binary forms, with or without
#     modification, are permitted provided that the following conditions are
#     met:
#
#        * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#        * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following disclaimer
#     in the documentation and/or other materials provided with the
#     distribution.
#        * Neither the name of Google Inc. nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#     A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#     OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#     LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Hook to install the git config for using the clang-format merge driver."""
import os
import subprocess
import sys
_VERSION = 1
def BuildGitCmd(*args):
  cmd = []
  if sys.platform == 'win32':
    cmd.append('git.bat')
  else:
    cmd.append('git')
  cmd.extend(args)
  return cmd
def main():
  # Assume that the script always lives somewhere inside the git repo.
  os.chdir(os.path.dirname(os.path.abspath(__file__)))
  try:
    current_version = subprocess.check_output(
        BuildGitCmd('config', 'merge.clang-format.version'))
    try:
      if int(current_version) >= _VERSION:
        return
    except ValueError:
      # Not parseable for whatever reason: reinstall the config.
      pass
  except subprocess.CalledProcessError:
    # git returned a non-zero return code, the config probably doesn't exist.
    pass
  print 'Installing clang-format merge driver into .git/config...'
  subprocess.check_call(
      BuildGitCmd('config', 'merge.clang-format.name',
                  'clang-format merge driver'))
  subprocess.check_call(
      BuildGitCmd('config', 'merge.clang-format.driver',
                  'clang_format_merge_driver %O %A %B %P'))
  subprocess.check_call(
      BuildGitCmd('config', 'merge.clang-format.recursive', 'binary'))
  subprocess.check_call(
      BuildGitCmd('config', 'merge.clang-format.version', str(_VERSION)))
if __name__ == '__main__':
  sys.exit(main())
