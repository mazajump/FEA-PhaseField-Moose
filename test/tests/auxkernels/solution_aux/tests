[Tests]
  [./build]
    # Builds the solution for: test, direct, solution_aux_scale. output_error
    type = 'Exodiff'
    input = 'build.i'
    exodiff = 'build_out.e'
  [../]

  [./test]
    type = 'Exodiff'
    input = 'solution_aux.i'
    exodiff = 'solution_aux_out.e'
    prereq = 'build'
  [../]

  [./direct]
    type = 'Exodiff'
    input = 'solution_aux_direct.i'
    exodiff = 'solution_aux_direct_out.e'
    prereq = 'build'
  [../]

  [./exodus]
    type = 'Exodiff'
    input = 'solution_aux_exodus.i'
    exodiff = 'solution_aux_exodus_out.e'
  [../]

  [./exodus_file_extension]
    type = 'Exodiff'
    input = 'solution_aux_exodus_file_extension.i'
    exodiff = 'solution_aux_exodus_file_extension_out.e'
  [../]

  [./exodus_elem_map]
    type = 'Exodiff'
    input = 'solution_aux_exodus_elem_map.i'
    exodiff = 'solution_aux_exodus_elem_map_out.e'
  [../]

  [./exodus_elemental]
    type = 'Exodiff'
    input = 'solution_aux_exodus_elemental.i'
    exodiff = 'solution_aux_exodus_elemental_out.e'
  [../]

  [./exodus_elemental_only]
    # Tests using a single variable from a file containing multiple variables
    type = 'Exodiff'
    input = 'solution_aux_exodus_elemental_only.i'
    exodiff = 'solution_aux_exodus_elemental_only_out.e'
  [../]

  [./exodus_direct]
    type = 'Exodiff'
    input = 'solution_aux_exodus_direct.i'
    exodiff = 'solution_aux_exodus_direct_out.e'
  [../]

  [./exodus_interp]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp.i'
    exodiff = 'solution_aux_exodus_interp_out.e'
  [../]

  [./exodus_interp_restart1]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp_restart1.i'
    exodiff = 'solution_aux_exodus_interp_restart1_out.e'
  [../]

  [./exodus_interp_restart2]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp_restart2.i'
    exodiff = 'solution_aux_exodus_interp_restart2_out.e'
    prereq = exodus_interp_restart1
    recover = false
  [../]

  [./exodus_interp_direct]
    type = 'Exodiff'
    input = 'solution_aux_exodus_interp_direct.i'
    exodiff = 'solution_aux_exodus_interp_direct_out.e'
  [../]

  [./multiple_input]
    type = 'Exodiff'
    input = 'solution_aux_multi_var.i'
    exodiff = 'solution_aux_multi_var_out.e'
  [../]

  [./multiple_input_error]
    type = 'RunException'
    input = 'solution_aux_multi_err.i'
    expect_err = 'The SolutionUserObject contains multiple variables, \w+'
  [../]

  [./solution_aux_scale]
    type = 'Exodiff'
    input = 'solution_aux_scale.i'
    exodiff = 'solution_aux_scale_out.e'
    prereq = 'build'
  [../]

  [./output_error]
    type = 'RunException'
    input = 'output_error.i'
    expect_err = "Failed to access the data for variable 'u' at point"
    prereq = 'build'
    # This test throws an error from a threaded region. Rather than lock the error region,
    # we'll just avoid running it with multiple threads.
    max_threads = 1
  [../]

  [./aux_nonlinear_solution]
    # This builds the XDA and XDR files for the 'aux_nonlinear_solution_from_xda/r' tests below
    type = Exodiff
    input = 'aux_nonlinear_solution.i'
    exodiff = 'aux_nonlinear_solution_out.e'
  [../]

  [./aux_nonlinear_solution_from_xda]
    type = Exodiff
    input = 'aux_nonlinear_solution_xda.i'
    exodiff = 'aux_nonlinear_solution_xda_out.e'
    prereq = aux_nonlinear_solution
  [../]

  [./aux_nonlinear_solution_from_xdr]
    type = Exodiff
    input = 'aux_nonlinear_solution_xdr.i'
    exodiff = 'aux_nonlinear_solution_xdr_out.e'
    prereq = aux_nonlinear_solution

    # This test reads a binary file that was written with 4-byte dof
    # ids.  At this time, it is only possible to read it back in with
    # a libmesh that also uses 4-byte dof ids.
    dof_id_bytes = 4
  [../]

  [./aux_nonlinear_solution_adapt]
    # This builds the XDA file for the 'aux_nonlinear_solution_adapt_from_xda' test below
    type = RunApp
    input = 'aux_nonlinear_solution_adapt.i'
  [../]

  [./aux_nonlinear_solution_adapt_from_xda]
    type = Exodiff
    input = 'aux_nonlinear_solution_adapt_xda.i'
    exodiff = 'aux_nonlinear_solution_adapt_xda_out.e'
    prereq = aux_nonlinear_solution_adapt
  [../]

  [./thread_test]
    type = CSVDiff
    input = 'thread_xda.i'
    csvdiff = 'thread_xda_out.csv'
    min_threads = 2
    prereq = aux_nonlinear_solution_from_xda
  [../]
[]
