[Tests]
  [./no_outputs_block]
    # Test the a file w/o output outputs
    type = RunApp
    input = console_no_outputs_block.i
    expect_out = 'Framework Information'
  [../]
  [./postprocessors]
    # Tests if the header line for the postprocessor values table is correct
    type = RunApp
    input = 'console.i'
    expect_out = '| time           | num_aux        | num_vars       |'
    match_literal = True
    group = 'requirements'
  [../]
  [./scalar_variables]
    # Test that the first header line for the wrapped scalar AuxVariable table is correct
    type = RunApp
    input = 'console.i'
    expect_out = '\| time\s*?\| aux0_0\s*?\|\n'
  [../]
  [./warning]
    # Test that duel screen output warning is printed
    type = RunApp
    input = 'console_warning.i'
    cli_args = 'Outputs/console=true Outputs/screen/file_base=console_warning_out'
    expect_out = 'Multiple \(3\) Console output objects are writing to the screen, this will likely cause duplicate messages printed.'
    allow_warnings = true
    max_parallel = 1 # warning can mix on multiple processes
  [../]
  [./file_system_information]
    # Test that file contains regex
    type = CheckFiles
    input = 'console.i'
    cli_args = 'Outputs/screen/output_file=true Outputs/screen/file_base=console_file_system_information_out'
    check_files = 'console_file_system_information_out.txt'
    file_expect_out = 'Num\s*DOFs:\s*242'
    recover = false
    group = 'requirements'
  [../]
  [./file_postprocessor]
    # Test that file contains regex
    type = CheckFiles
    input = 'console.i'
    cli_args = 'Outputs/screen/output_file=true Outputs/screen/file_base=console_file_postprocessor_out'
    check_files = 'console_file_postprocessor_out.txt'
    file_expect_out = '\| time\s*\| num_aux\s*\| num_vars\s*\|\n'
    recover = false
    group = 'requirements'
  [../]
  [./file_scalar_aux]
    # Test that file contains regex
    type = CheckFiles
    input = 'console.i'
    cli_args = 'Outputs/screen/output_file=true Outputs/screen/file_base=console_file_scalar_aux_out'
    check_files = 'console_file_scalar_aux_out.txt'
    file_expect_out = '\| time\s*?\| aux0_0\s*?\|\n'
    recover = false
    group = 'requirements'
  [../]
  [./file_solve_log]
    # Test that file contains regex
    type = CheckFiles
    input = 'console.i'
    cli_args = 'Outputs/screen/output_file=true Outputs/screen/solve_log=true Outputs/screen/file_base=console_file_solve_log_out'
    check_files = 'console_file_solve_log_out.txt'
    file_expect_out = 'Moose\sTest\sPerformance:'
    recover = false
    group = 'requirements'
  [../]
  [./norms]
    # Test that the variable norms are being output
    type = RunApp
    input = 'console.i'
    cli_args = 'Outputs/screen/all_variable_norms=true'
    expect_out = 'Variable Residual Norms:'
    group = 'requirements'
  [../]
  [./timing]
    # Tests that the --timing enables all logs
    type = RunApp
    input = 'console.i'
    cli_args = 'Outputs/screen/perf_log=false --timing'
    expect_out = 'Moose\sTest\sPerformance:'
    group = 'requirements'
  [../]
  [./transient]
    # Test the transient console output, with negative start-time
    type = RunApp
    input = 'console_transient.i'
    expect_out = 'Time Step  4, time = -0.600000'
  [../]
  [./transient_perf_int]
    # Test the transient console output with a perf log interval
    type = RunApp
    input = 'console_transient.i'
    cli_args = 'Outputs/screen/perf_log_interval=6'
    expect_out = 'Time Step  6.*?Moose Test Performance.*?Time Step  7'
  [../]
  [./_console]
    # Test the used of MooseObject::_console method
    type = RunApp
    input = 'moose_console.i'
    expect_out = 'ConsoleMessageKernel::timestepSetup - time = 0\.4; t_step = 4'
  [../]
  [./_console_const]
    # Test the used of MooseObject::_console method from a constant method
    type = RunApp
    input = 'moose_console.i'
    expect_out = 'I am writing from a const method'
  [../]
  [./input_output]
    # Test the use of --show-input
    type = RunApp
    input = 'console.i'
    cli_args = '--show-input'
    expect_out = '\[\./screen\]'
    group = 'requirements'
  [../]
  [./print_linear_residuals_disable]
    # Tests that using 'output_on' inside console disables flag to show linear residuals
    type = RunApp
    input = 'console_print_toggles.i'
    expect_out = '\s*0\sNonlinear.*?\n\s*1\sNonlinear'
    valgrind = NONE
    cli_args = "Outputs/execute_on='timestep_begin linear' Outputs/console/execute_on='nonlinear final failed timestep_end'"
  [../]
  [./print_perf_log]
    # Tests that flag is working to show performace log from the top level
    type = RunApp
    input = 'console_print_toggles.i'
    expect_out = 'Moose Test Performance'
    cli_args = 'Outputs/print_perf_log=true'
  [../]
  [./print_perf_log_disable]
    # Tests that perf log is disabled flag when console level flag is set to false
    type = RunApp
    input = 'console_print_toggles.i'
    # We are testing that the perflog is disabled, so the string 'Alive time' should
    # be absent from the output.
    absent_out = 'Alive time'
    valgrind = NONE
    # Note the "--disable-perflog" cli option is for libMesh currently NOT MOOSE
    cli_args = '--disable-perflog Outputs/print_perf_log=true Outputs/console/perf_log=false --no-timing'
    method = 'opt oprof devel' # debug prints some extra stuff at the end that messes up the regex
  [../]
  [./additional_output_on]
    # Test use of 'additional_output_on' parameter
    type = RunApp
    input = 'additional_execute_on.i'
    expect_out = 'Time\sStep\s*0'
  [../]
  [./console_final]
    # Test that Console output shows up when "final" execution is set and interval is not equal 1
    type = RunApp
    input = 'console_final.i'
    expect_out = 'Time\sStep\s11'
    group = 'requirements'
  [../]
[]
